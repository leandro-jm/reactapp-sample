# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  - group: dev
  - name: DOCKER_REPOSITORY
    value: $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(DOCKER_REPOSITORY_NAME)

steps:
- script: |
    aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com
  displayName: 'Login to AWS'
  env:
    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
- task: Docker@2
  displayName: Build & Push Docker Image
  inputs:
   repository: $(DOCKER_REPOSITORY)
   command: buildAndPush
   Dockerfile: dockerfile
   tags: |
      $(Build.BuildId)
      latest

- task: AWSShellScript@1
  inputs:
    scriptType: 'inline'
    inlineScript: |
      pip install setuptools
      pip install wheel
      pip install awscli --upgrade
      
      curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.21.2/2021-07-05/bin/linux/amd64/kubectl
      chmod +x ./kubectl
      mv ./kubectl /usr/bin/kubectl
      
      curl -o aws-iam-authenticator https://s3.us-west-2.amazonaws.com/amazon-eks/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
      mv ./aws-iam-authenticator /usr/bin/aws-iam-authenticator
      chmod +x /usr/bin/aws-iam-authenticator
      
      aws configure set aws_access_key_id XXXXXXXX
      aws sts get-caller-identity
      aws eks --region RRRRRR update-kubeconfig --name XXXXXX
      
      kubectl delete namespace eks-sample-app
      kubectl create namespace eks-sample-app
      
      cat << EOF > eks-sample-deployment.yaml
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: eks-sample-linux-deployment
        namespace: eks-sample-app
        labels:
          app: eks-sample-linux-app
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: eks-sample-linux-app
        template:
          metadata:
            labels:
              app: eks-sample-linux-app
          spec:
            affinity:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                  - matchExpressions:
                    - key: kubernetes.io/arch
                      operator: In
                      values:
                      - amd64
                      - arm64
            containers:
            - name: nginx
              image: XXXXXXXXXX.dkr.ecr.XXXXX.amazonaws.com/XXXXXX:latest
              ports:
              - name: http
                containerPort: 80
              imagePullPolicy: Always
            nodeSelector:
              kubernetes.io/os: linux
      EOF
      
      cat << EOF > eks-sample-service.yaml
      apiVersion: v1
      kind: Service
      metadata:
        name: eks-sample-linux-service
        namespace: eks-sample-app
        labels:
          app: eks-sample-linux-app
      spec:
        type: LoadBalancer
        selector:
          app: eks-sample-linux-app
        ports:
          - protocol: TCP
            port: 80
            targetPort: 80
      EOF
      
      kubectl apply -f eks-sample-deployment.yaml
      kubectl apply -f eks-sample-service.yaml
